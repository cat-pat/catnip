#!/bin/bash
# testing version for catnip
# set -x

# Cursor to absolute position
cup() { printf '\e[%s;%sH' "$1" "$2" ; }
# Cursor 0, 0
cup_home() { printf '\e[H' ; }
# Move cursor N lines <direction>
cup_up() { printf '\e[%sA' "$1" ; }
cup_down() { printf '\e[%sB' "$1" ; }
cup_right() { printf '\e[%sC' "$1" ; }
cup_left() { printf '\e[%sD' "$1" ; }
# Save and reset cursor position
cup_save() { printf '\e[s' ; }
cup_restore() { printf '\e[u' ; }
# Erase from cursor to end of line
cup_x_eol() { printf '\e[K'; }
# Erase from cursor to start of line
cup_x_sol() { printf '\e[1K'; }
# erase entire line
cup_x_dl() { printf '\e[2K'; }
# erase current line to bottom screen
cup_clear_to_bottom() { printf '\e[J' ; }
# erase current line to top screen
cup_clear_to_top() { printf '\e[1J'; }
# clear screen
cup_x_clear() { printf '\e[2J'; }
# clear screen and move to Home
cup_screen_home() { printf '\e[2J\e[H'; }
 
# an ansi code color gradient from light blue to purple
bgg=(
    '\e[0;38;2;127;191;255m'
    '\e[0;38;2;127;127;255m'
    '\e[0;38;2;127;063;255m'
    '\e[0;38;2;127;000;255m'
    '\e[0;38;2;127;000;255m'
    '\e[0;38;2;127;063;255m'
    '\e[0;38;2;127;127;255m'
    '\e[0;38;2;127;191;255m'
)

# function that takes a string as input and prints a colored gradient version
gradient() {
    str="${*}"
    # string=aaaaa ; ${string:0:5} var:index:length - starts at 0 indexing
    array_index=0
    color_index=0
    str_len="${#str}"
    # length to cut string into and change colors
    length="$((str_len / 8))"

    # color index loops in $length so if length=3 than its 0, 3, 6, 9 etc.. until string is ate up
    while [[ $color_index -le $str_len ]]; do
        printf '%b' "${bgg[$array_index]}${str:$color_index:$length}"
        color_index="$((color_index + length))"
        array_index="$((array_index + 1))"
    done
    # needs a newline otherwise it leaves a % sign
    printf "%s\n" ""
}

cat_logo() {
    clear
    echo -e "\n"
    echo -e "${bgg[0]}                           █       "
    echo -e "${bgg[1]}                ▐▌         ▀       "
    echo -e "${bgg[2]}      ▟██▖ ▟██▖▐███ ▐▙██▖ ██  ▐▙█▙ "
    echo -e "${bgg[3]}     ▐▛  ▘ ▘▄▟▌ ▐▌  ▐▛ ▐▌  █  ▐▛ ▜▌"
    echo -e "${bgg[4]}     ▐▌   ▗█▀▜▌ ▐▌  ▐▌ ▐▌  █  ▐▌ ▐▌"
    echo -e "${bgg[5]}     ▝█▄▄▌▐▙▄█▌ ▐▙▄ ▐▌ ▐▌▗▄█▄▖▐█▄█▘"
    echo -e "${bgg[6]}      ▝▀▀  ▀▀▝▘  ▀▀ ▝▘ ▝▘▝▀▀▀▘▐▌▀▘ "
    echo -e "${bgg[7]}                              ▐▌   "
    echo -e "\n"
}

show_image() {
    if (( i < 0 )); then
        # i=array_count
        i="${#array[@]}"
    fi

    if (( i >= array_count )); then
        i=0
    fi

    image="${array[$i]}"
    # image="$(realpath -- "$image")"
    # image="${image// /\ }"
    # image="${image//\x0/}"
    image=$(realpath -- "${image}")
    image="$(echo "${image}" | tr -d '\n' | tr -d '\n\r' | tr -d '\012'  | sed -e 's/\n//g' -e 's/\0//g' | tr -dc "[:print:]" )"
    # image="$(printf "%q" "$image")"
    image="$(echo "${image}" | tr -d '\x0')"
    # image="'${image}'"

    # tput cup 1 1 ; tput ech "$((${#image}+9))"
    tput cup 1 1 ; tput ech "$((COLUMNS - 3))"
    clear
    # gradient "${count} <=> ${image}"
    echo "$image"
    tput cup 2 1 ; echo "${image}" | od -c 

    # if [[ "$show_pre" -eq 1 ]]; then
    kitty +kitten icat --clear --scale-up --place "${size}x${size}@${lx}x${ly}" "${image}"
            # kitty +kitten icat --clear --scale-up "$image"
            # chafa -f kitty "${size}x${size}@${lx}x${ly}" "${image}"
    # fi
}


close_stdout() {
    exec >&-
}

restore_stdout(){
    exec 1>&6 6>&-
}

cat_logo

# PROG=${0##*/}

main(){
    cat_logo

    show_pre=1
    array_count="${#array[@]}"
    count="(${i}/${array_count})"
    i=0
    size=$((LINES + 20))
    lx=2
    ly=2

    while true; do
        read -r -s -N1 key </dev/tty 2>/dev/null
        case "$key" in
            # q) exec 1>&6 6>&1 ; break ;;
            j|$'\x1b\x5b\x41') i=$((i-1)) ; show_image ;;
            k|$'\x1b\x5b\x42') i=$((i+1)) ; show_image ;;
            J) i=$((i-5)) ; show_image ;;
            K) i=$((i+5)) ; show_image  ;;

            h) lx=$((lx-5)) ; show_image ;;
            l) lx=$((lx+5)) ; show_image ;;

            m) size=$((size+5)) ; show_image ;;
            n) size=$((size-5)) ; show_image ;;
            # $' '|$'\x20') show_menu=1 ;; # space key
            # $'\x1b') echo Escape Key ;; # escape key
            # i|:|\;) cmdd ;; # insert

            p) show_preview ;; # toggle preview on/off
            # f|F) swww img "$image" --transition-type center;; # set as background
            # o) swayimg "$image" ;; # open externally
            c) clear_scr && show_image ;;
            x) clean_image && wl-copy "$image" ;;

            $'\n'|$'\x0a') printf "%s\n" "${image}" >/dev/stdout && kitty +kitten icat --clear && break;;
            q) exit 0 ;;
        esac
    done
}

if [ -p /dev/stdin ]; then
    exec 6<&0
    # readarray -d '' array1 <&6
    readarray array1 <&6
    exec 0<&6 6<&-

    declare -a array
    for xyz in "${array1[@]}"; do
        # cleaned=$(echo "$xyz" | tr -dc '[:print:]' | sed 's/\0//g')
        cleaned=$(printf "%s\n" "$xyz" | tr -dc '[:print:]' | tr -d '\n')
        echo "$cleaned"
        # echo "$cleaned"|od -c
        # sleep 1
        # array+=( \'"${cleaned}"\' )
        array+=( "${cleaned}" )
    done
        # echo \'"${array[*]}"\'
        # sleep 10
else
    readarray -d '' array < <(fd . ~/ssd/gallery-dl -0 -tf -e png -e jpg -e webp)
fi

if [ -p /dev/stdout ]; then
    # link file descriptor #6 to stdout
    exec 6>&1

    "$0" < /dev/tty > /dev/tty 2>&1
    main
    exec 1>&6 6>&-
else
    main
fi
